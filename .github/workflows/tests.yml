name: Tests
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  clang:
    strategy:
      fail-fast: false
      matrix:
        clang: [ 6, 7, 8, 9, 10, 11, 12, 13 ] # , 14, 15, 16, 17 ]
        stdlib: [ "libc++", "libstdc++" ]
        standard: [ 11, 14, 17, 20, 23 ]
        exclude:
          - clang: 6
            stdlib: libc++
          - clang: 6
            standard: 20
          - clang: 6
            standard: 23
          - clang: 7
            stdlib: libstdc++
            standard: 20
          - clang: 7
            stdlib: libstdc++
            standard: 23
          - clang: 8
            stdlib: libstdc++
            standard: 20
          - clang: 8
            stdlib: libstdc++
            standard: 23
          - clang: 12
            stdlib: libc++

    name: "Clang ${{ matrix.clang }} [C++${{ matrix.standard }}, ${{ matrix.stdlib }}]"
    runs-on: ubuntu-20.04
    steps:
      - name: "Install Clang"
        uses: egor-tensin/setup-clang@v1
        with:
          version: ${{ matrix.clang }}
      - name: "Install libc++"
        if: ${{ matrix.stdlib == 'libc++' }}
        run: sudo apt-get install libc++abi-${{ matrix.clang }}-dev libc++1-${{ matrix.clang }} libc++-${{ matrix.clang }}-dev

      - uses: actions/checkout@v3
      - run: c++ -v
      - name: Set reusable strings
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
  
      - name: Configure CMake
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_STANDARD=${{ matrix.standard }}
          -DCMAKE_CXX_FLAGS=-stdlib=${{ matrix.stdlib }}
          -DCMAKE_CXX_COMPILER=c++
          -DCMAKE_BUILD_TYPE=Release
          -DIPADDRESS_BUILD_TESTS=ON
          -DIPADDRESS_BUILD_DOC=OFF
          -DIPADDRESS_BUILD_PACKAGES=OFF
          -S ${{ github.workspace }}

      - name: Build
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release
      
      - name: Run tests
        run: ctest --output-on-failure --test-dir ${{ steps.strings.outputs.build-output-dir }}

# jobs:
#   build:
#     runs-on: ${{ matrix.os }}
# 
#     strategy:
#       # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
#       fail-fast: false
# 
#       # Set up a matrix to run the following 3 configurations:
#       # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
#       # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
#       # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
#       #
#       # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
#       matrix:
#         os: [ubuntu-latest, windows-latest]
#         build_type: [Release]
#         c_compiler: [gcc, clang, cl]
#         include:
#           - os: windows-latest
#             c_compiler: cl
#             cpp_compiler: cl
#           - os: ubuntu-latest
#             c_compiler: gcc
#             cpp_compiler: g++
#           - os: ubuntu-latest
#             c_compiler: clang
#             cpp_compiler: clang++
#         exclude:
#           - os: windows-latest
#             c_compiler: gcc
#           - os: windows-latest
#             c_compiler: clang
#           - os: ubuntu-latest
#             c_compiler: cl
# 
#     steps:
#     - uses: actions/checkout@v3
# 
#     - name: Set reusable strings
#       # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
#       id: strings
#       shell: bash
#       run: |
#         echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
# 
#     - name: Configure CMake
#       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#       run: >
#         cmake -B ${{ steps.strings.outputs.build-output-dir }}
#         -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
#         -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
#         -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
#         -S ${{ github.workspace }}
# 
#     - name: Build
#       # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
#       run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
# 
#     - name: Test
#       working-directory: ${{ steps.strings.outputs.build-output-dir }}
#       # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest --build-config ${{ matrix.build_type }}
# 